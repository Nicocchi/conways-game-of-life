{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["operations","generateEmptyGrid","rows","i","push","Array","from","App","useState","grid","setGrid","running","setRunning","gridDisplay","showGrid","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","j","neighbors","forEach","x","y","newI","newJ","setTimeout","className","onClick","Math","random","randomGrid","style","display","gridTemplateColumns","map","col","key","newGrid","backgroundColor","undefined","border","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAOMA,EAAa,CACf,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,IAGHC,EAAoB,WAEtB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAhBJ,GAgBiBA,IACzBD,EAAKE,KAAKC,MAAMC,KAAKD,MAhBb,KAgB6B,kBAAM,MAG/C,OAAOH,GA4KIK,MAjIf,WAAgB,IAAD,EACaC,oBAAS,WAC7B,OAAOP,OAFA,mBACJQ,EADI,KACEC,EADF,OAKmBF,oBAAS,GAL5B,mBAKJG,EALI,KAKKC,EALL,OAOqBJ,oBAAS,GAP9B,mBAOJK,EAPI,KAOSC,EAPT,KASLC,EAAaC,iBAAOL,GAC1BI,EAAWE,QAAUN,EAErB,IAAMO,EAAgBC,uBAAY,WACzBJ,EAAWE,UAMhBP,GAAQ,SAACU,GACL,OAAOC,YAAQD,GAAG,SAACE,GACf,IAD6B,IAAD,WACnBnB,GACL,IAFwB,eAEfoB,GACL,IAAIC,EAAY,EAChBxB,EAAWyB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACrBC,EAAOzB,EAAIuB,EACXG,EAAON,EAAII,EAEbC,GAAQ,GACRA,EA5FhB,IA6FgBC,GAAQ,GACRA,EA7FhB,KA+FgBL,GAAaJ,EAAEQ,GAAMC,OAIzBL,EAAY,GAAKA,EAAY,EAC7BF,EAASnB,GAAGoB,GAAK,EACE,IAAZH,EAAEjB,GAAGoB,IAA0B,IAAdC,IACxBF,EAASnB,GAAGoB,GAAK,IAlBhBA,EAAI,EAAGA,EApFpB,GAoFiCA,IAAM,EAA1BA,IADJpB,EAAI,EAAGA,EApFhB,GAoF6BA,IAAM,EAA1BA,SA0BjB2B,WAAWZ,EAAe,QAC3B,IAEH,OACI,kBAAC,WAAD,KACI,yBAAKa,UAAU,UACX,4BACIA,UAAU,SACVC,QAAS,WACLpB,GAAYD,GACPA,IACDI,EAAWE,SAAU,EACrBC,OAIPP,EAAU,OAAS,SAExB,4BACIoB,UAAU,SACVC,QAAS,WACLpB,GAAW,GACXF,EAAQT,OAJhB,SASA,4BACI8B,UAAU,SACVC,QAAS,WACLtB,EArHL,WAEf,IADA,IAAMR,EAAO,GACJC,EAAI,EAAGA,EAzBJ,GAyBiBA,IACzBD,EAAKE,KACDC,MAAMC,KAAKD,MA1BP,KA0BuB,kBAAO4B,KAAKC,SAAW,GAAM,EAAI,MAIpE,OAAOhC,EA6GqBiC,MAHhB,UAQA,4BACIJ,UAAU,SACVC,QAAS,WACLlB,GAAUD,KAHlB,gBAUJ,yBAAKkB,UAAU,aACX,yBACIA,UAAU,YACVK,MAAO,CACHC,QAAS,OACTC,oBAAoB,UAAD,OA/J3B,GA+J2B,aAGtB7B,EAAK8B,KAAI,SAACrC,EAAMC,GAAP,OACND,EAAKqC,KAAI,SAACC,EAAKjB,GAAN,OACL,yBACIQ,UAAU,MACVU,IAAG,UAAKtC,EAAL,YAAUoB,GACbS,QAAS,WACL,IAAMU,EAAUrB,YACZZ,GACA,SAACa,GACGA,EAASnB,GAAGoB,GAAKd,EAAKN,GAAGoB,GAAK,EAAI,KAG1Cb,EAAQgC,IAEZN,MAAO,CACHO,gBAAiBlC,EAAKN,GAAGoB,GACnB,eACAqB,EACNC,OAAQhC,EAAc,oBAAsB,oBC7K5DiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.16ac20fc.chunk.js","sourcesContent":["import React, { useState, Fragment, useCallback, useRef } from \"react\";\nimport \"./App.css\";\nimport produce from \"immer\";\n\nconst numRows = 70;\nconst numCols = 70;\n\nconst operations = [\n    [0, 1],\n    [0, -1],\n    [1, -1],\n    [-1, 1],\n    [1, 1],\n    [-1, -1],\n    [1, 0],\n    [-1, 0],\n];\n\nconst generateEmptyGrid = () => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n        rows.push(Array.from(Array(numCols), () => 0));\n    }\n\n    return rows;\n};\n\nconst randomGrid = () => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n        rows.push(\n            Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\n        );\n    }\n\n    return rows;\n};\n\n// const simulate = (g) => {\n//     let gridCopy = g.map((k) => k);\n//     for (let i = 0; i < numRows; i++) {\n//         for (let j = 0; j < numCols; j++) {\n//             let neighbors = 0;\n//             operations.forEach(([x, y]) => {\n//                 const newI = i + x;\n//                 const newJ = j + y;\n//                 if (\n//                     newI >= 0 &&\n//                     newI < numRows &&\n//                     newJ >= 0 &&\n//                     newJ < numCols\n//                 ) {\n//                     neighbors += g[newI][newJ];\n//                 }\n//             });\n\n//             if (neighbors < 2 || neighbors > 3) {\n//                 gridCopy[i][j] = 0;\n//             } else if (g[i][j] === 0 && neighbors === 3) {\n//                 gridCopy[i][j] = 1;\n//             }\n//         }\n//     }\n\n//     return gridCopy;\n// }\n\nfunction App() {\n    const [grid, setGrid] = useState(() => {\n        return generateEmptyGrid();\n    });\n\n    const [running, setRunning] = useState(false);\n\n    const [gridDisplay, showGrid] = useState(false);\n\n    const runningRef = useRef(running);\n    runningRef.current = running;\n\n    const runSimulation = useCallback(() => {\n        if (!runningRef.current) {\n            return;\n        }\n\n        // Simulate\n        // setGrid((g) => simulate(g));\n        setGrid((g) => {\n            return produce(g, (gridCopy) => {\n                for (let i = 0; i < numRows; i++) {\n                    for (let j = 0; j < numCols; j++) {\n                        let neighbors = 0;\n                        operations.forEach(([x, y]) => {\n                            const newI = i + x;\n                            const newJ = j + y;\n                            if (\n                                newI >= 0 &&\n                                newI < numRows &&\n                                newJ >= 0 &&\n                                newJ < numCols\n                            ) {\n                                neighbors += g[newI][newJ];\n                            }\n                        });\n\n                        if (neighbors < 2 || neighbors > 3) {\n                            gridCopy[i][j] = 0;\n                        } else if (g[i][j] === 0 && neighbors === 3) {\n                            gridCopy[i][j] = 1;\n                        }\n                    }\n                }\n            });\n        });\n\n        setTimeout(runSimulation, 100);\n    }, []);\n\n    return (\n        <Fragment>\n            <div className=\"header\">\n                <button\n                    className=\"button\"\n                    onClick={() => {\n                        setRunning(!running);\n                        if (!running) {\n                            runningRef.current = true;\n                            runSimulation();\n                        }\n                    }}\n                >\n                    {running ? \"stop\" : \"start\"}\n                </button>\n                <button\n                    className=\"button\"\n                    onClick={() => {\n                        setRunning(false);\n                        setGrid(generateEmptyGrid());\n                    }}\n                >\n                    Clear\n                </button>\n                <button\n                    className=\"button\"\n                    onClick={() => {\n                        setGrid(randomGrid());\n                    }}\n                >\n                    Random\n                </button>\n                <button\n                    className=\"button\"\n                    onClick={() => {\n                        showGrid(!gridDisplay)\n                    }}\n                >\n                    Toggle Grid\n                </button>\n            </div>\n\n            <div className=\"game-area\">\n                <div\n                    className=\"flex-grid\"\n                    style={{\n                        display: \"grid\",\n                        gridTemplateColumns: `repeat(${numCols}, 10px)`,\n                    }}\n                >\n                    {grid.map((rows, i) =>\n                        rows.map((col, j) => (\n                            <div\n                                className=\"col\"\n                                key={`${i}-${j}`}\n                                onClick={() => {\n                                    const newGrid = produce(\n                                        grid,\n                                        (gridCopy) => {\n                                            gridCopy[i][j] = grid[i][j] ? 0 : 1;\n                                        }\n                                    );\n                                    setGrid(newGrid);\n                                }}\n                                style={{\n                                    backgroundColor: grid[i][j]\n                                        ? \"#408697\"\n                                        : undefined,\n                                    border: gridDisplay ? '1px solid #8D8C8A' : 'none'\n                                }}\n                            />\n                        ))\n                    )}\n                </div>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}